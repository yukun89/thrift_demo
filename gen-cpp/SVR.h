/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SVR_H
#define SVR_H

#include <thrift/TDispatchProcessor.h>
#include "SVR_types.h"

namespace SVR_NS {

class SVRIf {
 public:
  virtual ~SVRIf() {}
  virtual void add(Data& _return, const Data& v1, const Data& v2) = 0;
  virtual void subtract(Data& _return, const Data& v1, const Data& v2) = 0;
};

class SVRIfFactory {
 public:
  typedef SVRIf Handler;

  virtual ~SVRIfFactory() {}

  virtual SVRIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SVRIf* /* handler */) = 0;
};

class SVRIfSingletonFactory : virtual public SVRIfFactory {
 public:
  SVRIfSingletonFactory(const boost::shared_ptr<SVRIf>& iface) : iface_(iface) {}
  virtual ~SVRIfSingletonFactory() {}

  virtual SVRIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SVRIf* /* handler */) {}

 protected:
  boost::shared_ptr<SVRIf> iface_;
};

class SVRNull : virtual public SVRIf {
 public:
  virtual ~SVRNull() {}
  void add(Data& /* _return */, const Data& /* v1 */, const Data& /* v2 */) {
    return;
  }
  void subtract(Data& /* _return */, const Data& /* v1 */, const Data& /* v2 */) {
    return;
  }
};

typedef struct _SVR_add_args__isset {
  _SVR_add_args__isset() : v1(false), v2(false) {}
  bool v1;
  bool v2;
} _SVR_add_args__isset;

class SVR_add_args {
 public:

  SVR_add_args() {
  }

  virtual ~SVR_add_args() throw() {}

  Data v1;
  Data v2;

  _SVR_add_args__isset __isset;

  void __set_v1(const Data& val) {
    v1 = val;
  }

  void __set_v2(const Data& val) {
    v2 = val;
  }

  bool operator == (const SVR_add_args & rhs) const
  {
    if (!(v1 == rhs.v1))
      return false;
    if (!(v2 == rhs.v2))
      return false;
    return true;
  }
  bool operator != (const SVR_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SVR_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SVR_add_pargs {
 public:


  virtual ~SVR_add_pargs() throw() {}

  const Data* v1;
  const Data* v2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SVR_add_result__isset {
  _SVR_add_result__isset() : success(false) {}
  bool success;
} _SVR_add_result__isset;

class SVR_add_result {
 public:

  SVR_add_result() {
  }

  virtual ~SVR_add_result() throw() {}

  Data success;

  _SVR_add_result__isset __isset;

  void __set_success(const Data& val) {
    success = val;
  }

  bool operator == (const SVR_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SVR_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SVR_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SVR_add_presult__isset {
  _SVR_add_presult__isset() : success(false) {}
  bool success;
} _SVR_add_presult__isset;

class SVR_add_presult {
 public:


  virtual ~SVR_add_presult() throw() {}

  Data* success;

  _SVR_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SVR_subtract_args__isset {
  _SVR_subtract_args__isset() : v1(false), v2(false) {}
  bool v1;
  bool v2;
} _SVR_subtract_args__isset;

class SVR_subtract_args {
 public:

  SVR_subtract_args() {
  }

  virtual ~SVR_subtract_args() throw() {}

  Data v1;
  Data v2;

  _SVR_subtract_args__isset __isset;

  void __set_v1(const Data& val) {
    v1 = val;
  }

  void __set_v2(const Data& val) {
    v2 = val;
  }

  bool operator == (const SVR_subtract_args & rhs) const
  {
    if (!(v1 == rhs.v1))
      return false;
    if (!(v2 == rhs.v2))
      return false;
    return true;
  }
  bool operator != (const SVR_subtract_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SVR_subtract_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SVR_subtract_pargs {
 public:


  virtual ~SVR_subtract_pargs() throw() {}

  const Data* v1;
  const Data* v2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SVR_subtract_result__isset {
  _SVR_subtract_result__isset() : success(false) {}
  bool success;
} _SVR_subtract_result__isset;

class SVR_subtract_result {
 public:

  SVR_subtract_result() {
  }

  virtual ~SVR_subtract_result() throw() {}

  Data success;

  _SVR_subtract_result__isset __isset;

  void __set_success(const Data& val) {
    success = val;
  }

  bool operator == (const SVR_subtract_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SVR_subtract_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SVR_subtract_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SVR_subtract_presult__isset {
  _SVR_subtract_presult__isset() : success(false) {}
  bool success;
} _SVR_subtract_presult__isset;

class SVR_subtract_presult {
 public:


  virtual ~SVR_subtract_presult() throw() {}

  Data* success;

  _SVR_subtract_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SVRClient : virtual public SVRIf {
 public:
  SVRClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  SVRClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add(Data& _return, const Data& v1, const Data& v2);
  void send_add(const Data& v1, const Data& v2);
  void recv_add(Data& _return);
  void subtract(Data& _return, const Data& v1, const Data& v2);
  void send_subtract(const Data& v1, const Data& v2);
  void recv_subtract(Data& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SVRProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<SVRIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SVRProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_subtract(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SVRProcessor(boost::shared_ptr<SVRIf> iface) :
    iface_(iface) {
    processMap_["add"] = &SVRProcessor::process_add;
    processMap_["subtract"] = &SVRProcessor::process_subtract;
  }

  virtual ~SVRProcessor() {}
};

class SVRProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SVRProcessorFactory(const ::boost::shared_ptr< SVRIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< SVRIfFactory > handlerFactory_;
};

class SVRMultiface : virtual public SVRIf {
 public:
  SVRMultiface(std::vector<boost::shared_ptr<SVRIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SVRMultiface() {}
 protected:
  std::vector<boost::shared_ptr<SVRIf> > ifaces_;
  SVRMultiface() {}
  void add(boost::shared_ptr<SVRIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void add(Data& _return, const Data& v1, const Data& v2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(_return, v1, v2);
    }
    ifaces_[i]->add(_return, v1, v2);
    return;
  }

  void subtract(Data& _return, const Data& v1, const Data& v2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->subtract(_return, v1, v2);
    }
    ifaces_[i]->subtract(_return, v1, v2);
    return;
  }

};

} // namespace

#endif
